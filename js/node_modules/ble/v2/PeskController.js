import Promise from 'bluebird';
import { Platform } from 'react-native';
import _ from 'lodash';
import BleController from './BleController';
import { setRetrieveServicesStatus, getErrorInfo } from './libPesk';
import getUUID from './getUUID';

export default class PeskController {
  constructor() {
    this.bleController = new BleController();
    this.connId = '';
    this.serviceId = '';
    this.connectPromise = null;
    this.onHeightCallback = null;
    this.defaultHeights = [0, 0, 0, 0];
    this.interval = setInterval(() => {
      if (this.currentAction) {
        this.currentAction();
      }
    }, 150);
  }

  reset() {
    clearInterval(this.interval);
    return this.bleController.destructor();
  }

  connect({ connId, serviceId }) {
    this.serviceId = getUUID(serviceId);

    // if (this.connId === connId) {
    //   return this.connectPromise;
    // }

    this.connId = connId;
    console.log('========= connect ======== ', { connId, serviceId });
    this.connectPromise = this.bleController.connect({
      connId,
      serviceId,
      onConnect: currentDevice => {
        console.log('[Pesk] connected', connId);
        this.retrieveServices(currentDevice)
          .then(peripheralInfo => {
            console.log('peripheralInfo = ', peripheralInfo);
            this.peripheralInfo = peripheralInfo;
            setRetrieveServicesStatus();
          })
          .delay(1000)
          .then(() => {
            this.turnOnHeightNotification();
          });
      },
    });

    return this.connectPromise;
  }

  retrieveServices(currentDevice) {
    console.log('[Pesk]  retrieveServices');
    return this.bleController.retrieveServices(currentDevice);
  }

  moveUp() {
    console.log('[Pesk] move up');
    this.currentAction = () => {
      this.writeUnderPlatform(this.serviceId, getUUID('ff01'), [
        0xf1,
        0xf1,
        0x01,
        0x00,
        0x01,
        0x7e,
      ]);
    };
    this.currentAction();
  }

  moveDown() {
    console.log('[Pesk] move down');
    this.currentAction = () => {
      this.writeUnderPlatform(this.serviceId, getUUID('ff01'), [
        0xf1,
        0xf1,
        0x02,
        0x00,
        0x02,
        0x7e,
      ]);
    };
    this.currentAction();
  }

  moveStop() {
    console.log('[Pesk] move stop');
    this.currentAction = null;
    return this.writeUnderPlatform(this.serviceId, getUUID('ff01'), [
      0xf1,
      0xf1,
      0x0a,
      0x00,
      0x0a,
      0x7e,
    ]);
  }

  moveToHeight(height) {
    const low = height % 256;
    const high = height >> 8;
    const num = Number(0x1b + 0x02 + high + low).toString(16);
    const num2 = parseInt(num.substr(num.length - 2), 16);
    const data = [0xf1, 0xf1, 0x1b, 0x02, high, low, num2, 0x7e];
    console.log('[Pesk] moveToStand  ', { num, data });
    return this.bleController
      .write(this.serviceId, getUUID('ff01'), data)
      .catch(console.warn);
  }

  turnOnHeightNotification() {
    console.log('[Pesk] turnOnHeightNotification');
    return this.bleController.onValue(this.serviceId, getUUID('FF02'), {
      onReceive: this.onHeight.bind(this),
      onReady: this.getHeight.bind(this),
    });
  }

  getHeight() {
    console.log('[Pesk] getHeight');
    return this.bleController
      .write(this.serviceId, getUUID('FF01'), [
        0xf1,
        0xf1,
        0x07,
        0x00,
        0x07,
        0x7e,
      ])
      .catch(console.warn);
  }

  setOnHeight(onHeight) {
    this.onHeightCallback = onHeight;
  }

  onHeight(heightInHex) {
    console.log('[Pesk] heightInHex = ', heightInHex);
    if (typeof this.onHeightCallback !== 'function') {
      return {};
    }
    if (_.isEqual(heightInHex, this.heightInHex)) {
      return {};
    }
    const data = {};
    const errorCode = heightInHex[2];
    const error = errorCode === 2 || errorCode === 4;
    if (error) {
      data.error = getErrorInfo(
        errorCode === 4 ? `${heightInHex[3]}` : `${heightInHex[4]}`,
      );
      this.onHeightCallback(data);
    } else if (errorCode === 1) {
      data.error = null;
      data.height = (heightInHex[4] * 256 + heightInHex[5]) / 10;
      data.action =
        (heightInHex[4] * 256 + heightInHex[5]) / 10 >= 90 ? 'stand' : 'sit';
      this.onHeightCallback(data);
    }
    this.heightInHex = heightInHex;
    return {};

    // if (typeof this.onHeightCallback !== 'function') {
    //   return {};
    // }

    // 040201aa对应的是reset状态。在reset时第一次给出的是正确的值，但长时间在reset状态下就会得到一个乱序的4个字节，因此加了判断
    // if (this.lastHeight === '040201aa' && parseInt(heightInHex.substr(4, 4), 16) / 10 !== 72) {

    // TODO: 用this.cache做判断
    // if (this.cache.heightInHex === '040201aa' && parseInt(heightInHex.substr(4, 4), 16) / 10 !== 72)
    //   return;
    // }

    // const errorCode = heightInHex[0];
    // let error = errorCode !== 1 && errorCode !== 0 && errorCode !== 6;
    // const data = {};
    // const manualInfo = {}; // 手控器存储信息
    // data.heightInHex = heightInHex;
    // if (error) {
    //   const str2 = Number(heightInHex[2]).toString(16);
    //   const str3 = Number(heightInHex[3]).toString(16);
    //   const str2true = str2.length === 1 ? `0${str2}` : str2;
    //   const str3true = str3.length === 1 ? `0${str3}` : str3;
    //   error = [errorCode, str2true + str3true];
    //   data.error = error;
    // } else if (errorCode === 6) {
    //   // 该条件下返回的是手控版信息
    //   error = null;
    //   data.error = error;
    //   manualInfo.manualUpdate = true; // 添加属性表示手控版信息有更新
    //   manualInfo.manualStatus = heightInHex[2]; // 添加属性表示手控版存储信息的状态
    // } else {
    //   error = null;
    //   data.error = error;
    //   data.height = (heightInHex[2] * 256 + heightInHex[3]) / 10;
    //   data.status = heightInHex[1];
    //
    //   if (data.height < 55) {
    //     this.unit = 'inch';
    //     data.height *= 2.54;
    //   } else {
    //     this.unit = 'cm';
    //   }
    // }
    //
    // if (
    //   data.height !== this.cache.height ||
    //   data.status !== this.cache.status ||
    //   data.error !== this.cache.error ||
    //   manualInfo.manualStatus !== this.cacheManaual.manualStatus
    // ) {
    //   // 判断当前手控版状态和缓存的手控版信息状态是否相同
    //   this.cache = data;
    //   this.cacheManaual = manualInfo;
    //   this.onHeightCallback(error, manualInfo, data); // 返回开启通知时可能得到的三种信息 1.错误信息  2.手控版信息 3.桌子正常时的位置信息
    //   return data;
    // }
    // return {};
  }

  // 根据手机系统写对应的数据
  writeUnderPlatform(deviceUUID, characteristicUUID, data) {
    if (Platform.OS === 'ios') {
      return this.bleController
        .write(deviceUUID, characteristicUUID, data)
        .catch(console.warn);
    }
    return this.bleController
      .writeWithoutResponse(deviceUUID, characteristicUUID, data)
      .catch(console.warn);
  }
}
